name: Internal contributor check

on:
  pull_request:
    types: [opened]

jobs:
  check-membership:
    runs-on: ubuntu-latest

    steps:
    - name: Check if user is a member of MicrosoftDocs
      shell: pwsh
      env: 
        PayloadJson: ${{ toJSON(github) }}
        AccessToken: ${{ secrets.GITHUB_TOKEN }}

      run: |

        # Get GitHub data and event
        $GitHubData = $env:PayloadJson | ConvertFrom-Json -Depth 50
        $GitRequestEvent = $GitHubData.event_name
        $AccessToken = $env:AccessToken      
        $GitHubHeaders = @{
            Authorization = "token $($AccessToken)"
            "User-Agent" = "OfficeDocs"
        }

        $PR_USER = $GitHubData.event.pull_request.user.login
        $ORG = "MicrosoftDocs"

        Try
        {
            Write-Host "Checking if $PR_USER has a microsoft.com email address"
            
            $url = "https://api.github.com/users/$PR_USER"
            
            # Make the API request
            $response = Invoke-RestMethod -Uri $url -Headers $GitHubHeaders

            Write-Host $response
            
            # Extract the email
            $email = $response.email

            Write-Host $email
            
            # Check if the email contains @microsoft.com
            if ($email -and $email -like "*@microsoft.com") {
                Write-Output "The user's email is a Microsoft email: $email"
            } else {
                Write-Output "The user's email is not a Microsoft email or is not available."
            }
        }
        Catch
        {
            # Capture and display detailed exception information
            Write-Host "An error occurred: $($_.Exception.Message)"
            Write-Host "Exception type: $($_.Exception.GetType().FullName)"
            Write-Host "Line number: $($_.InvocationInfo.ScriptLineNumber)"
            Write-Host "Position: $($_.InvocationInfo.OffsetInLine)"
            Write-Host "Script name: $($_.InvocationInfo.ScriptName)"
            Write-Host "Error line: $($_.InvocationInfo.Line)"

            # Read and display the line of code that caused the error
            $scriptPath = $($_.InvocationInfo.ScriptName)
            if ($scriptPath) {
                $lines = Get-Content -Path $scriptPath
                $errorLine = $_.InvocationInfo.ScriptLineNumber
                Write-Host "Code at error line $errorLine : $($lines[$errorLine - 1])"
            }
        }
